services:

    eprints:
        depends_on:
            database:
                condition: service_healthy
        build:
            context: ./docker/1.0
            dockerfile: Dockerfile
            args:
                 ARCHIVE_ID: '${ARCHIVE_ID}'
        #image: 'damalis/eprints3/debian'
        #user: eprints
        tty: true
        stdin_open: true
        container_name: eprints
        networks:
            - backend
        volumes:
            - 'eprints:${EPRINTS_DOC_ROOT}'
            - type: bind
              source: ./docker/create_pub_values.txt
              target: '/tmp/create_pub_values.txt'
            - type: bind
              source: ./packagecheck.sh
              target: '/tmp/packagecheck.sh'
        hostname: eprints
        restart: unless-stopped
        ports:
            - '9000:80'
        healthcheck:
            test: ["CMD-SHELL", "[ -f \"${EPRINTS_DOC_ROOT}/cfg/apache_ssl/${ARCHIVE_ID}.conf\" ] > /dev/null || exit 1"]
            interval: 5s
            timeout: 5s
            retries: 150
        environment:
            TZ: '${LOCAL_TIMEZONE}'
        labels:
            - 'docker-volume-backup.stop-during-backup=true'
        command: bash -c "if [ ! -d \"${EPRINTS_DOC_ROOT}/archives/${ARCHIVE_ID}\" ]; then sleep 10 && su -c '${EPRINTS_DOC_ROOT}/bin/epadmin create pub < /tmp/create_pub_values.txt; trap exit TERM;' - eprints; else su -c '${EPRINTS_DOC_ROOT}/bin/epadmin test ${ARCHIVE_ID} --verbose' - eprints; fi; service cron start; tail -f /dev/null"

    webserver:
        depends_on:
            eprints:
                condition: service_healthy
        image: httpd:latest
        container_name: webserver
        networks:
            - backend
            - frontend
        volumes:
            - 'eprints:${EPRINTS_DOC_ROOT}'
            - type: bind
              source: ./webserver
              target: '${HTTPD_PREFIX}/conf'
            - type: bind
              source: ./webserver/ssl-option/options-ssl-apache.conf
              target: '${LETSENCRYPT_CONF_PREFIX}/options-ssl-apache.conf'
            - type: bind
              source: ./ssl-conf.sh
              target: '/tmp/ssl-conf.sh'
            - 'certbot-etc:${LETSENCRYPT_CONF_PREFIX}'
            - '/tmp/acme-challenge:/tmp/acme-challenge'
            - type: bind
              source: ./packagecheck.sh
              target: '/tmp/packagecheck.sh'
        hostname: webserver
        restart: unless-stopped
        ports:
            - '80:80'
            - '443:443'
        healthcheck:
            test: ["CMD-SHELL", "/bin/pidof httpd > /dev/null || exit 1"]
            interval: 5s
            timeout: 5s
            retries: 100
        environment:
            TZ: '${LOCAL_TIMEZONE}'
        command: bash -c "apt-get -y update && dpkg --configure -a && if ! getent passwd 'eprints'>/dev/null; then useradd eprints; fi && export APACHE_RUN_USER=eprints && export APACHE_RUN_GROUP=eprints && sh /tmp/packagecheck.sh 'gettext libapache2-mod-perl2 libcgi-session-perl libdbd-mysql-perl libio-string-perl libjson-perl libxml-parser-perl libxml-libxml-perl libtext-unidecode-perl' && sh /tmp/ssl-conf.sh '${DOMAIN_NAME}' '${LETSENCRYPT_CONF_PREFIX}' '${HTTPD_PREFIX}/conf'"

    certbot:
        depends_on:
            webserver:
                condition: service_healthy
        image: certbot/certbot:latest
        container_name: certbot
        networks:
            - backend
        volumes:
            - 'certbot-etc:${LETSENCRYPT_CONF_PREFIX}'
            - 'certbot-var:/var/lib/letsencrypt'
            - '/tmp/acme-challenge:/tmp/acme-challenge'
        restart: unless-stopped
        healthcheck:
            test: ["CMD-SHELL", "test -d ${LETSENCRYPT_CONF_PREFIX}/live/${DOMAIN_NAME} || exit 1"]
            interval: 5s
            timeout: 5s
            retries: 20
        environment:
            TZ: '${LOCAL_TIMEZONE}'
        entrypoint: /bin/sh -c "${SSL_SNIPPET}; trap exit TERM; while :; do certbot renew --dry-run; sleep 12h & wait $${!}; done;"

    phpmyadmin:
        depends_on:
            certbot:
                condition: service_healthy
        image: phpmyadmin:latest
        container_name: phpmyadmin
        networks:
            - backend
            - frontend
        volumes:
            - type: bind
              source: ./phpmyadmin/apache2/sites-available/default-ssl.conf
              target: '${APACHE_CONFDIR_PREFIX}/sites-available/default-ssl.conf'
            - type: bind
              source: ./phpmyadmin/apache2/ports.conf
              target: '${APACHE_CONFDIR_PREFIX}/ports.conf'
            - type: bind
              source: ./phpmyadmin/ssl-option/options-ssl-apache.conf
              target: '${LETSENCRYPT_CONF_PREFIX}/options-ssl-apache.conf'
            - type: bind
              source: ./phpmyadmin/config.user.inc.php
              target: '${PMA_CONF_FOLDER}/config.user.inc.php'
            - type: bind
              source: ./phpmyadmin/php/conf.d/security.ini
              target: '${PHP_INI_DIR_PREFIX}/php/conf.d/security.ini'
            - 'certbot-etc:${LETSENCRYPT_CONF_PREFIX}'
        hostname: phpmyadmin
        restart: unless-stopped
        ports:
            - '9090:443'
        environment:
            PMA_HOST: 'database'
            PMA_PMADB: 'phpmyadmin'
            PMA_CONTROLUSER: '${PMA_CONTROLUSER}'
            PMA_CONTROLPASS: '${PMA_CONTROLPASS}'
            MYSQL_ROOT_PASSWORD: '${MYSQL_ROOT_PASSWORD}'
            UPLOAD_LIMIT: '${PMA_UPLOAD_LIMIT}'
            MEMORY_LIMIT: '${PMA_MEMORY_LIMIT}'
            TZ: '${LOCAL_TIMEZONE}'
        command: >
            bash -c "echo ${PMA_HTPASSWD_USERNAME}:phpmyadmin:$$( printf \"%s:%s:%s\" \"${PMA_HTPASSWD_USERNAME}\" \"phpmyadmin\" \"${PMA_HTPASSWD_PASSWORD}\" | md5sum | awk '{print $$1}' ) > ${PMA_CONF_FOLDER}/.htpasswd 
            && printf 'AuthType Digest\\nAuthName \"phpmyadmin\"\\nAuthDigestProvider file\\nAuthUserFile ${PMA_CONF_FOLDER}/.htpasswd\\nRequire valid-user\\n' > /var/www/html/.htaccess && a2enmod auth_digest; 
            mkdir -p /var/www/html/../upload && chown www-data:www-data /var/www/html/../upload && chmod a+w /var/www/html/../upload; mkdir -p /var/www/html/../save && chown www-data:www-data /var/www/html/../save && chmod a+w /var/www/html/../save; 
            grep -qxF 'ServerName 127.0.0.1' ${APACHE_CONFDIR_PREFIX}/apache2.conf || echo -e '\\nServerName 127.0.0.1' >> ${APACHE_CONFDIR_PREFIX}/apache2.conf; grep -qxF 'date.timezone = ${LOCAL_TIMEZONE}' ${PHP_INI_DIR_PREFIX}/php/conf.d/security.ini || echo 'date.timezone = ${LOCAL_TIMEZONE}' >> ${PHP_INI_DIR_PREFIX}/php/conf.d/security.ini; 
            a2enmod ssl && a2ensite default-ssl && a2dissite 000-default && /docker-entrypoint.sh 'apache2-foreground'"

    database:
        image: ${DATABASE_IMAGE_NAME}:${DATABASE_VERSION}
        container_name: database
        networks:
            - backend
        volumes:
            - 'db:/var/lib/mysql'
            - 'db-backup-data:/tmp/backup'
            - type: bind
              source: ./database/conf.d/z-${DATABASE_IMAGE_NAME}.cnf
              target: '${MYSQL_CONF_PREFIX}/z-${DATABASE_IMAGE_NAME}.cnf'
            - 'phpmyadmin-sql:/docker-entrypoint-initdb.d'
            - '/sys/fs/cgroup/memory.pressure:/sys/fs/cgroup/memory.pressure'
        hostname: database
        restart: unless-stopped
        ports:
            - '3306:3306'
        security_opt:
            - no-new-privileges:true
        healthcheck:
            test: ["CMD-SHELL", "${DATABASE_ADMIN_COMMANDLINE}  ping --silent || exit 1"]
            interval: 5s
            timeout: 5s
            retries: 50
        environment:
            MYSQL_ROOT_PASSWORD: '${MYSQL_ROOT_PASSWORD}'
            MYSQL_ALLOW_EMPTY_PASSWORD: 'No'
            MYSQL_ROOT_HOST: '${MYSQL_ROOT_HOST}'
            TZ: '${LOCAL_TIMEZONE}'
        labels:
            - "docker-volume-backup.stop-during-backup=true"
            - "docker-volume-backup.archive-pre=/bin/sh -c 'mysqldump -uroot -p${MYSQL_ROOT_PASSWORD} --all-databases > /tmp/backup/db_backup_data.sql'"
            - "docker-volume-backup.exec-label=database"
        command: bash -c "${DATABASE_PACKAGE_MANAGER} && chmod 0444 ${MYSQL_CONF_PREFIX}/z-${DATABASE_IMAGE_NAME}.cnf && export PMA_CONTROLUSER=${PMA_CONTROLUSER} export PMA_CONTROLPASS=${PMA_CONTROLPASS} && envsubst '$$PMA_CONTROLUSER,$$PMA_CONTROLPASS' < /docker-entrypoint-initdb.d/create_tables.sql.template > /docker-entrypoint-initdb.d/create_tables.sql && docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci"

    backup:
        image: offen/docker-volume-backup:latest
        container_name: backup
        networks:
            - backend
        volumes:
            - 'eprints:/backup/eprints:ro'
            - 'db:/backup/db:ro'
            - 'db-backup-data:/backup/db-backup-data:ro'
            - '/var/run/docker.sock:/var/run/docker.sock:ro'
            - type: bind
              source: ./backups
              target: /archive
        hostname: backup
        restart: unless-stopped
        environment:
            BACKUP_CRON_EXPRESSION: '20 01 * * *'
            BACKUP_FILENAME: 'backup-%Y-%m-%dT%H-%M-%S.tar.gz'
            BACKUP_RETENTION_DAYS: '7'
            EXEC_LABEL: 'database'
            #BACKUP_EXCLUDE_REGEXP: 'folder|folder|file|\\.log$$'    

networks:
    backend: null
    frontend: null

volumes:
    eprints:
        name: eprints-html
        driver: local
        driver_opts:
            type: none
            device: ${DIRECTORY_PATH}/eprints
            o: bind
    db:
        name: ${DATABASE_CONT_NAME}-data
    db-backup-data:
        name: ${DATABASE_CONT_NAME}-backup-data
    phpmyadmin-sql:
        name: phpmyadmin-sql
        driver: local
        driver_opts:
            type: none
            device: ${DIRECTORY_PATH}/database/phpmyadmin/sql
            o: bind
    certbot-etc:
        external: true
    certbot-var:
        name: certbot-var
